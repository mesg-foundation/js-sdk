syntax = "proto3";

import "gogo/protobuf/gogoproto/gogo.proto";

package mesg.grpc.orchestrator;
option go_package = "github.com/mesg-foundation/engine/service/grpc/orchestrator";

// This is the Runner API to interact with the Orchestrator.
// This API requires all requests to be signed for authentication. The signature should be passed in the request's metadata using the key `mesg_request_signature` and base64 encoded.
service Runner {
  // Register registers a new runner to the Engine.
  // This endpoint should only be called when the runner is ready to receive execution and emit events.
  // This endpoint returns a credential token that must be use to reach the Runner APIs.
  rpc Register(RunnerRegisterRequest) returns (RunnerRegisterResponse) {}

  // Delete a runner from the blockchain.
  rpc Delete(RunnerDeleteRequest) returns (RunnerDeleteResponse) {}
}

// RunnerRegisterRequest is the request of the endpoint Register.
message RunnerRegisterRequest {
  // Service's hash to start the runner with.
  bytes serviceHash = 1 [
    (gogoproto.moretags) = 'validate:"required,hash"',
    (gogoproto.casttype) = "github.com/mesg-foundation/engine/hash.Hash"
  ];

  // Hash of the environmental variables to start the runner with.
  bytes envHash = 2 [
    (gogoproto.moretags) = 'validate:"omitempty,hash"',
    (gogoproto.casttype) = "github.com/mesg-foundation/engine/hash.Hash"
  ];
}

// RunnerRegisterResponse is the response of the endpoint Register.
message RunnerRegisterResponse {
  // token to use with the other endpoints of this API.
  string token = 1;
}

// RunnerDeleteRequest is the request of the endpoint DeleteRunner.
message RunnerDeleteRequest {
  bytes runnerHash = 1 [
    (gogoproto.moretags) = 'validate:"required,hash"',
    (gogoproto.casttype) = "github.com/mesg-foundation/engine/hash.Hash"
  ];
}

// RunnerDeleteResponse is the response of the endpoint DeleteRunner.
message RunnerDeleteResponse {}
